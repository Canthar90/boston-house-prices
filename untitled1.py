# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wnfwkxaddqWsXBt1GExkbE_muxAyGtL7
"""

import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px
import numpy as np
import seaborn as sns
import matplotlib.dates as mdates
from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,
                               AutoMinorLocator)
import scipy.stats as stats
from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()
from sklearn.model_selection import train_test_split
from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.linear_model import LinearRegression

data_df = pd.read_csv("boston.csv") 
data_df.head()

data_df.isnull().values.any()

data_df.isna().values.any()

data_df.tail()

data_df.columns

data_df.shape

# plt.figure(figsize=(12,6), dpi=200)
# plt.title("Very Racist Data from Boston Real estate company is racist")

racist=px.bar(data_df,
            x='PRICE',
            y='B')

racist.update_layout(xaxis_title='Prices in 1000$',
                     yaxis_title='Statistical number of Afroamerican peopre in area')

racist.show()

romes_prices = data_df.sort_values(by='RM', ascending=True)
romes_prices.head()

av_price_rooms = pd.DataFrame(columns=['Room_nr', 'Price'])
temp = romes_prices.rolling(window=6).mean()
av_price_rooms['Room_nr'] = temp.RM[5:]
av_price_rooms['Price'] = temp.PRICE[5:]
av_price_rooms.head()

av_price_rooms.sample(5)

rmprices=px.line(av_price_rooms,
                 x='Room_nr',
                 y='Price',
                 title='Rooms count to House price'
                 )
rmprices.update_layout(xaxis_title='Numbers of rooms in apartment',
                       yaxis_title='Price of apartment in 1000$')

rmprices.show()

by_pt = data_df.sort_values(by='PTRATIO', ascending=True)

by_pt.head()
temp = by_pt.rolling(window=6).mean()
teachers_prices = pd.DataFrame()
teachers_prices['Teacher_Student'] = temp[5:].PTRATIO
teachers_prices['Price'] = by_pt[5:].PRICE
teachers_prices.head()

te_st = px.line(teachers_prices,
                x='Teacher_Student',
                y='Price',
                title='Price by Pupil-Teacher ratio')
te_st.update_layout(xaxis_title='Teacher-Student Ratio',
                    yaxis_title='Price of the property in 1000$')

te_st.show()

histio = sns.displot(data=data_df,
                     x='PRICE',
                     bins=50,
                     aspect=2,
                     kde=True,
                     color='#2196f3'
                     )
plt.title(f'1970s Home Values in Boston. Average: ${(1000*data_df.PRICE.mean()):.6}')
plt.xlabel('Price in 1000s')
plt.ylabel('Nr. of Homes')

his2 = sns.displot(data=data_df,
                   bins=50,
                   x='RM',
                   aspect=2,
                   kde=True,
                   color='#2196f3')
plt.title(f'1970s Home Values to Room count. Average:{(data_df.RM.mean()):.6}')
plt.xlabel('Price in 1000$')
plt.ylabel('Nr of  Rooms')

his3 = sns.displot(data=data_df,
                   x='DIS',
                   bins=50,
                   kde=True,
                   color='darkblue',
                   aspect=2)
plt.title(f'1970 Home Values to Employments Centre Average: {(data_df.DIS.mean()):.2}')
plt.xlabel('Apartment Prices')
plt.ylabel('Employment Centre Average')

his4 = sns.displot(data=data_df,
                   x='RAD',
                   bins=24,
                   kde=True,
                   color='#7b1fa2',
                   )
plt.xlabel('Accessibility to Highways')
plt.ylabel('Nr of Houses')

near_rivers = data_df.groupby('CHAS').count()
near_rivers['Y/N'] = ['No','Yes']

near_rivers=near_rivers.set_index('Y/N')
near_rivers

river_access = data_df['CHAS'].value_counts()
riv=px.bar(near_rivers,
           x=['NO', 'YES'],
           y='ZN',
           color=river_access.values,
           color_continuous_scale=px.colors.sequential.haline,
           title='Is the property near river')
riv.update_layout(xaxis_title='Is property lays next to rver',
                  yaxis_title='Number of Properties',
                  coloraxis_showscale=False)

riv.show()

data_to_check = data_df[['NOX','DIS']]
pol_dist = sns.pairplot(data_to_check)

data_to_check = data_df[['RM', 'PRICE']]
sns.pairplot(data_to_check)

data_to_check = data_df[["LSTAT",'PRICE']]
sns.pairplot(data_to_check)

join1=sns.jointplot(data=data_df, 
             x='DIS',
             y='NOX',
             height=8,
             kind='scatter',
             color='deeppink',
             joint_kws={'alpha':0.5} 
           )
# join1.set(title='Distance from working place to level of air contamination')
join1.fig.suptitle('Distance from working place to level of air contamination')

join2 = sns.jointplot(data=data_df,
                      x='INDUS',
                      y='NOX',
                      height=7,
                      color='darkgreen',
                      joint_kws={'alpha':0.5})
join2.fig.suptitle('Level of industry in area to air purity')

with sns.axes_style('darkgrid'):
  join3 = sns.jointplot(data=data_df,
                        x='LSTAT',
                        y='RM',
                        height=7,
                        color='orange',
                        alpha=0.5)
  join3.fig.suptitle('Lower Income Population vs Average Number of Rooms')

join4 = sns.jointplot(data=data_df,
                      x='LSTAT',
                      y='PRICE',
                      height=7,
                      color='crimson',
                      alpha=0.5)

join4.fig.suptitle('Lower Income Population vs Average Number of Rooms')

join5 = sns.jointplot(data=data_df,
                      x='RM',
                      y='PRICE',
                      height=7,
                      color='darkblue',
                      alpha=0.5)

join5.fig.suptitle('Rooms count to Price')

data_df

target = data_df['PRICE']
features = data_df.drop('PRICE', axis=1)
X_train, X_test, y_train, y_test = train_test_split(features, 
                                                            target, 
                                                            test_size=0.2, 
                                                            random_state=10)

X_test.shape

y_test.shape

regr = linear_model.LinearRegression()

# Train the model using the training sets
regr.fit(X_train, y_train)

# Make predictions using the testing set
rsquared = regr.score(X_train, y_train)
print(f'Training data r-squared: {rsquared:.2}')

regr_coef = pd.DataFrame(data=regr.coef_, index=X_train.columns, columns=['Coefficient'])
regr_coef

# Premium for having an extra room\n",
premium = regr_coef.loc['RM'].values[0] * 1000  # i.e., ~3.11 * 1000,
print(f'The price premium for having an extra room is ${premium:.5}')

predicted_vals = regr.predict(X_train)
residuals = (y_train - predicted_vals)

residuals

plt.figure(dpi=100)
plt.scatter(x=y_train, y=predicted_vals, c='indigo', alpha=0.6)
plt.plot(y_train, y_train, color='cyan')
plt.title(f'Actual vs Predicted Prices: $y _i$ vs $\hat y_i$', fontsize=17 )
plt.xlabel('Actual prices 1000$ $y _i$', fontsize=14)
plt.ylabel('Prediced prices 1000$ $\hat y _i$', fontsize=14)

plt.figure(dpi=100)
plt.scatter(x=predicted_vals, y=residuals, c='indigo', alpha=0.6)
plt.title('Residuals vs Predicted Values', fontsize=17)
plt.xlabel('Predicted Prices $\hat y _i$', fontsize=14)
plt.ylabel('Residuals', fontsize=14)
plt.show()

resid_mean = round(residuals.mean(), 2)
resid_skew = round(residuals.skew(), 2)

sns.displot(residuals, kde=True, color='indigo')
plt.title(f'Residual Skew({resid_skew}) Mean({resid_mean})')
plt.show()

tgt_skew = data_df['PRICE'].skew()
sns.displot(data=data_df,
            x='PRICE',
            kde=True,
            color='green')
plt.title(f'Normal Prices. Skew os {tgt_skew:.3}')
plt.show()

plt.figure(dpi=150)
plt.scatter((data_df.PRICE), np.log(data_df.PRICE))

plt.title('Mapping the orginal Price to Log Price')
plt.ylabel('Log Price')
plt.xlabel('Actual $ Price in 1000$')

new_target = np.log(data_df['PRICE']) # Use log prices
features = data_df.drop('PRICE', axis=1)

X_train, X_test, log_y_train, log_y_test = train_test_split(features, 
                                                    new_target, 
                                                    test_size=0.2, 
                                                    random_state=10)

log_regr = LinearRegression()
log_regr.fit(X_train, log_y_train)
log_rsquared = log_regr.score(X_train, log_y_train)

log_predictions = log_regr.predict(X_train)
log_residuals = (log_y_train - log_predictions)

print(f'Training data r-squared: {log_rsquared:.2}')

df_coef = pd.DataFrame(data=log_regr.coef_, index=X_train.columns, columns=['coef'])
df_coef

plt.figure(dpi=100)
plt.scatter(x=y_train, y=predicted_vals, c='indigo', alpha=0.6)
plt.plot(y_train, y_train, color='cyan')
plt.title(f'Actual vs Predicted Prices: $y _i$ vs $\hat y_i$', fontsize=17 )
plt.xlabel('Actual prices 1000$ $y _i$', fontsize=14)
plt.ylabel('Prediced prices 1000$ $\hat y _i$', fontsize=14)

plt.figure(dpi=100)
plt.scatter(x=predicted_vals, y=residuals, c='indigo', alpha=0.6)
plt.title('Residuals vs Predicted Values', fontsize=17)
plt.xlabel('Predicted Prices $\hat y _i$', fontsize=14)
plt.ylabel('Residuals', fontsize=14)
plt.show()

plt.scatter(x=log_y_train, y=log_predictions, c='navy', alpha=0.6)
plt.plot(log_y_train, log_y_train, color='cyan')
plt.title(f'Actual vs Predicted Log Prices: $y _i$ vs $\hat y_i$ (R-Squared {log_rsquared:.2})', fontsize=17)
plt.xlabel('Actual Log Prices $y _i$', fontsize=14)
plt.ylabel('Prediced Log Prices $\hat y _i$', fontsize=14)
plt.show()

plt.scatter(x=log_predictions, y=log_residuals, c='navy', alpha=0.6)
plt.title('Residuals vs Fitted Values for Log Prices', fontsize=17)
plt.xlabel('Predicted Log Prices $\hat y _i$', fontsize=14)
plt.ylabel('Residuals', fontsize=14)
plt.show()

log_resid_mean = round(log_residuals.mean(), 2)
log_resid_skew = round(log_residuals.skew(), 2)

sns.displot(log_residuals, kde=True, color='navy')
plt.title(f'Log price model: Residuals Skew({log_resid_skew}) Mean ({log_resid_mean})')
plt.show()

sns.displot(residuals, kde=True, color='indigo')
plt.title(f'Orginal model: Residuals Skew ({resid_skew}) Mean ({resid_mean})')

print(f'Original Model Test Data r-squared: {regr.score(X_test, y_test):.2}')
print(f'Log Model Test Data r-squared: {log_regr.score(X_test, log_y_test):.2}')

features = data_df.drop(['PRICE'], axis=1)
average_vals = features.mean().values
property_stats = pd.DataFrame(data=average_vals.reshape(1, len(features.columns)), columns=features.columns)
property_stats

# Make prediction
log_estimate = log_regr.predict(property_stats)[0]
print(f'The log price estimate is ${log_estimate:.3}')

# Convert Log Prices to Acutal Dollar Values
dollar_est = np.e**log_estimate * 1000
# or use
dollar_est = np.exp(log_estimate) * 1000
print(f'The property is estimated to be worth ${dollar_est:.6}')

next_to_river=True
nr_rooms = 8
students_per_classroom = 20
distance_to_town = 5
pollution = data_df.NOX.quantile(q=0.75)
amount_of_poverty = data_df.LSTAT.quantile(q=0.25)

property_stats['RM'] = nr_rooms
property_stats['PTRATIO'] = students_per_classroom
property_stats['DIS'] = distance_to_town

if next_to_river:
    property_stats['CHAS'] = 1
else:
    property_stats['CHAS'] = 0

property_stats['NOX'] = pollution
property_stats['LSTAT'] = amount_of_poverty

log_estimate = log_regr.predict(property_stats)[0]
print(f'The log price estimate is ${log_estimate:.3}')

dollar_est = np.e**log_estimate * 1000
print(f'The property is estimated to be worth ${dollar_est:.6}')